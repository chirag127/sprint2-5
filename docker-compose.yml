version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: grocery-postgres
    environment:
      POSTGRES_DB: grocery_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - grocery-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Spring Boot Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: grocery-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/grocery_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      JWT_SECRET: development-secret-key-change-in-production
      JWT_EXPIRATION_MS: 86400000
      EMAIL_API_KEY: your-mailgun-api-key
      EMAIL_API_URL: https://api.mailgun.net/v3/your-domain/messages
      EMAIL_FROM: noreply@grocerystore.com
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - grocery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: grocery-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:8080/api
    ports:
      - "3000:8080"
    depends_on:
      - backend
    networks:
      - grocery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: grocery-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - grocery-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Load Balancer (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: grocery-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - grocery-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  grocery-network:
    driver: bridge
